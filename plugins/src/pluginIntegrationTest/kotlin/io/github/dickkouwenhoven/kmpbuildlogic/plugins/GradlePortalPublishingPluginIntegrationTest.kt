/*
 * Copyright 2022 Dick Kouwenhoven
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package io.github.dickkouwenhoven.kmpbuildlogic.plugins

import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import java.io.File
import java.nio.file.Files

class GradlePortalPublishingPluginIntegrationTest {
    private lateinit var testProjectDir: File
    private lateinit var buildFile: File
    private lateinit var settingsFile: File
    private lateinit var pluginClasspath: List<File>

    @BeforeEach
    fun setup() {
        // Create temporary directory for the test project
        testProjectDir = Files.createTempDirectory("integration-test").toFile()
        buildFile = File(testProjectDir, "build.gradle.kts")
        settingsFile = File(testProjectDir, "settings.gradle.kts")

        // Read the plugin classpath generated by the build script
        val classpathFile = File("build/plugin-classpath.txt")
        require(classpathFile.exists()) { "Plugin classpath file not found: ${classpathFile.absolutePath}" }

        pluginClasspath = classpathFile.readLines().map(::File)

        // Write minimal build.gradle.kts using plugin under test
        buildFile.writeText(
            """
            plugins {
                id("java")
                id("com.gradleup.shadow") version "8.3.6"
            }
            """.trimIndent(),
        )

        // Write minimal settings.gradle.kts
        settingsFile.writeText(
            "rootProject.name = \"integration-test\"",
        )
    }

    @Test
    fun pluginAppliesSuccessfully() {
        val result =
            GradleRunner
                .create()
                .withProjectDir(testProjectDir)
                .withPluginClasspath(pluginClasspath)
                .withArguments("tasks", "--stacktrace")
                .forwardOutput()
                .build()

        // Assert the build succeeded
        assertEquals(TaskOutcome.SUCCESS, result.task(":tasks")?.outcome)
    }

    @Test
    fun doAPluginIntegrationWithJavaPluginTest() {
        val projectDir = createTempDirectory()
        projectDir.resolve("settings.gradle.kts").writeText("")
        projectDir.resolve("build.gradle.kts").writeText(
            """
            plugins {
                id("java")
                id("com.gradleup.shadow") version "8.3.6"
            }
        """,
        )

        val pluginMetadataFile = Files.createTempFile(projectDir, "plugin-under-test-metadata", ".properties")
        pluginMetadataFile.toFile().writeText(
            """
            pluginId=com.gradleup.shadow
            version=8.3.6
        """,
        )

        val result =
            GradleRunner
                .create()
                .withProjectDir(projectDir.toFile())
                .withArguments("tasks")
                .withPluginClasspath(listOf(pluginMetadataFile.toFile()))
                .build()

        assertTrue(result.output.contains("com.gradleup.shadow"))
    }
}
